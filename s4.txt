WITH file_data AS (
    -- Step 0: Extract file size from keywords and filter > 1 GB
    SELECT
        console_path,
        file_path,
        file_name,
        CAST(keywords[cardinality(keywords)] AS BIGINT) AS file_size_bytes
    FROM "data_retention_uat"."policy_document_metadata"
    WHERE keywords IS NOT NULL
      AND cardinality(keywords) > 0
      AND TRY_CAST(keywords[cardinality(keywords)] AS BIGINT) IS NOT NULL
      AND CAST(keywords[cardinality(keywords)] AS BIGINT) <= 1073741824
),

ordered_files AS (
    -- Step 1: Order files by size descending
    SELECT
        *,
        ROW_NUMBER() OVER (ORDER BY file_size_bytes DESC) AS rn
    FROM file_data
),

-- Step 2: Compute running sum reset when batch exceeds 1 GB
batch_assignment AS (
    SELECT
        file_name,
        file_path,
        console_path,
        file_size_bytes,
        rn,
        SUM(file_size_bytes) OVER (
            PARTITION BY grp
            ORDER BY rn
            ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
        ) AS running_batch_sum,
        grp
    FROM (
        SELECT
            *,
            SUM(is_new_batch) OVER (ORDER BY rn) AS grp
        FROM (
            SELECT
                *,
                CASE 
                    WHEN SUM(file_size_bytes) OVER (ORDER BY rn ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) 
                         + file_size_bytes > 1073741824
                    THEN 1
                    ELSE 0
                END AS is_new_batch
            FROM ordered_files
        )
    )
),

safe_batches AS (
    -- Step 3: Assign final batch numbers
    SELECT
        *,
        grp + 1 AS batch_number
    FROM batch_assignment
)

-- Step 4: Summarize per batch
SELECT
    batch_number AS batch_id,
    COUNT(*) AS file_count,
    ROUND(SUM(file_size_bytes) / (1024.0*1024*1024), 3) AS total_size_gb,
    ROUND(SUM(file_size_bytes) / (1024.0*1024), 0) AS total_size_mb,
    ROUND(100.0 * SUM(file_size_bytes) / 1073741824, 1) AS utilization_percent,
    CASE
        WHEN SUM(file_size_bytes) > 1073741824 THEN 'EXCEEDS_LIMIT'
        WHEN SUM(file_size_bytes) < 104857600 THEN 'LOW_UTILIZATION'
        ELSE 'COMPLIANT'
    END AS batch_status,
    ROUND(MAX(file_size_bytes) / (1024.0*1024), 1) AS largest_file_mb
FROM safe_batches
GROUP BY batch_number
ORDER BY batch_number;
