WITH file_data AS (
    -- Extract file size and filter out >1 GB
    SELECT
        console_path,
        file_path,
        file_name,
        CAST(keywords[cardinality(keywords)] AS BIGINT) AS file_size_bytes
    FROM "data_retention_uat"."policy_document_metadata"
    WHERE keywords IS NOT NULL
      AND cardinality(keywords) > 0
      AND TRY_CAST(keywords[cardinality(keywords)] AS BIGINT) IS NOT NULL
      AND CAST(keywords[cardinality(keywords)] AS BIGINT) <= 1073741824
),

ordered_files AS (
    -- Sort ascending so small files are packed first
    SELECT
        *,
        ROW_NUMBER() OVER (ORDER BY file_size_bytes ASC) AS rn
    FROM file_data
),

running_totals AS (
    -- Cumulative sum of file sizes
    SELECT
        *,
        SUM(file_size_bytes) OVER (ORDER BY rn ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS running_total
    FROM ordered_files
),

safe_batching AS (
    -- Assign batch number based on running_total / 1GB
    SELECT
        *,
        FLOOR((running_total - 1) / 1073741824) + 1 AS batch_number
    FROM running_totals
)

SELECT
    batch_number AS batch_id,
    COUNT(*) AS file_count,
    ROUND(SUM(file_size_bytes) / (1024*1024*1024), 3) AS total_size_gb,
    ROUND(SUM(file_size_bytes) / (1024*1024), 0) AS total_size_mb,
    ROUND(100.0 * SUM(file_size_bytes) / 1073741824, 1) AS utilization_percent,
    CASE
        WHEN SUM(file_size_bytes) > 1073741824 THEN 'EXCEEDS_LIMIT'
        WHEN SUM(file_size_bytes) < 104857600 THEN 'LOW_UTILIZATION'
        ELSE 'COMPLIANT'
    END AS batch_status,
    ROUND(MAX(file_size_bytes) / (1024*1024), 1) AS largest_file_mb
FROM safe_batching
GROUP BY batch_number
ORDER BY batch_number;
