WITH RECURSIVE file_data AS (
    -- Step 0: Extract file size and filter > 1 GB
    SELECT
        console_path,
        file_path,
        file_name,
        CAST(keywords[cardinality(keywords)] AS BIGINT) AS file_size_bytes,
        ROW_NUMBER() OVER (ORDER BY file_size_bytes DESC) AS rn
    FROM "data_retention_uat"."policy_document_metadata"
    WHERE keywords IS NOT NULL
      AND cardinality(keywords) > 0
      AND TRY_CAST(keywords[cardinality(keywords)] AS BIGINT) IS NOT NULL
      AND CAST(keywords[cardinality(keywords)] AS BIGINT) <= 1073741824
),

-- Recursive CTE to assign batches
batching AS (
    -- Anchor: first file
    SELECT
        rn,
        file_name,
        file_path,
        console_path,
        file_size_bytes,
        1 AS batch_number,
        file_size_bytes AS batch_sum
    FROM file_data
    WHERE rn = 1

    UNION ALL

    -- Recursive step: assign next file to current batch if sum <= 1GB, else start new batch
    SELECT
        f.rn,
        f.file_name,
        f.file_path,
        f.console_path,
        f.file_size_bytes,
        CASE 
            WHEN b.batch_sum + f.file_size_bytes <= 1073741824 THEN b.batch_number
            ELSE b.batch_number + 1
        END AS batch_number,
        CASE 
            WHEN b.batch_sum + f.file_size_bytes <= 1073741824 THEN b.batch_sum + f.file_size_bytes
            ELSE f.file_size_bytes
        END AS batch_sum
    FROM batching b
    JOIN file_data f ON f.rn = b.rn + 1
)

-- Final aggregation per batch
SELECT
    batch_number AS batch_id,
    COUNT(*) AS file_count,
    ROUND(SUM(file_size_bytes) / (1024*1024*1024), 3) AS total_size_gb,
    ROUND(SUM(file_size_bytes) / (1024*1024), 0) AS total_size_mb,
    ROUND(100.0 * SUM(file_size_bytes) / 1073741824, 1) AS utilization_percent,
    CASE
        WHEN SUM(file_size_bytes) > 1073741824 THEN 'EXCEEDS_LIMIT'
        WHEN SUM(file_size_bytes) < 104857600 THEN 'LOW_UTILIZATION'
        ELSE 'COMPLIANT'
    END AS batch_status,
    ROUND(MAX(file_size_bytes) / (1024*1024), 1) AS largest_file_mb
FROM batching
GROUP BY batch_number
ORDER BY batch_number;
