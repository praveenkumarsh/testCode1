WITH RECURSIVE
recursive_batches (
    rn,
    console_path,
    file_path,
    file_name,
    file_size_bytes,
    batch_number,
    batch_running_total
) AS (
    -- Base case: first record
    SELECT
        1 AS rn,
        console_path,
        file_path,
        file_name,
        CAST(keywords[cardinality(keywords)] AS BIGINT) AS file_size_bytes,
        1 AS batch_number,
        CAST(keywords[cardinality(keywords)] AS BIGINT) AS batch_running_total
    FROM "data_retention_uat"."policy_document_metadata"
    WHERE keywords IS NOT NULL
      AND cardinality(keywords) > 0
      AND TRY_CAST(keywords[cardinality(keywords)] AS BIGINT) IS NOT NULL
      AND CAST(keywords[cardinality(keywords)] AS BIGINT) <= 1073741824
    ORDER BY CAST(keywords[cardinality(keywords)] AS BIGINT) DESC
    LIMIT 1

    UNION ALL

    -- Recursive case: add next file by order
    SELECT
        f.rn,
        f.console_path,
        f.file_path,
        f.file_name,
        f.file_size_bytes,
        CASE
            WHEN r.batch_running_total + f.file_size_bytes > 1073741824 THEN r.batch_number + 1
            ELSE r.batch_number
        END AS batch_number,
        CASE
            WHEN r.batch_running_total + f.file_size_bytes > 1073741824 THEN f.file_size_bytes
            ELSE r.batch_running_total + f.file_size_bytes
        END AS batch_running_total
    FROM recursive_batches r
    JOIN (
        SELECT
            ROW_NUMBER() OVER (ORDER BY CAST(keywords[cardinality(keywords)] AS BIGINT) DESC) AS rn,
            console_path,
            file_path,
            file_name,
            CAST(keywords[cardinality(keywords)] AS BIGINT) AS file_size_bytes
        FROM "data_retention_uat"."policy_document_metadata"
        WHERE keywords IS NOT NULL
          AND cardinality(keywords) > 0
          AND TRY_CAST(keywords[cardinality(keywords)] AS BIGINT) IS NOT NULL
          AND CAST(keywords[cardinality(keywords)] AS BIGINT) <= 1073741824
    ) f ON f.rn = r.rn + 1
)

SELECT
    batch_number AS batch_id,
    COUNT(*) AS file_count,
    ROUND(SUM(file_size_bytes) / (1024.0 * 1024.0 * 1024.0), 3) AS total_size_gb,
    ROUND(SUM(file_size_bytes) / (1024.0 * 1024.0), 0) AS total_size_mb,
    ROUND(100.0 * SUM(file_size_bytes) / 1073741824, 1) AS utilization_percent,
    CASE
        WHEN SUM(file_size_bytes) > 1073741824 THEN 'EXCEEDS_LIMIT'  -- should never happen
        WHEN SUM(file_size_bytes) < 104857600 THEN 'LOW_UTILIZATION'
        ELSE 'COMPLIANT'
    END AS batch_status,
    ROUND(MAX(file_size_bytes) / (1024.0 * 1024.0), 1) AS largest_file_mb
FROM recursive_batches
GROUP BY batch_number
ORDER BY batch_number;
